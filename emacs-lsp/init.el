;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

;; Author: Andrey Listopadov
;; Keywords: literate programming, Emacs configuration
;; Homepage: https://gitlab.com/andreyorst/dotfiles/-/tree/master/.config/emacs

;;; Commentary:
;; Emacs config.
;; This file was automatically generated by `org-babel-tangle'.
;; Do not change this file.  Main config is located in README.org at `user-emacs-directory'

;;; Code:

(unless (featurep 'early-init)
  (load (expand-file-name "early-init" user-emacs-directory)))

(straight-use-package 'use-package)
(defvar straight-use-package-by-default)
(setq straight-use-package-by-default t)
(require 'use-package)

(use-package diminish)

(setq user-full-name "Nicolas Chapon"
        user-mail-address "nchapon@gmail.com")

(defconst is-mac (equal system-type 'darwin))
(defconst is-linux (equal system-type 'gnu/linux))
(defconst is-windows (equal system-type 'windows-nt))
(defconst has-gui (display-graphic-p))

(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file t))

(setq initial-major-mode 'lisp-interaction-mode
      redisplay-dont-pause t
      column-number-mode t
      echo-keystrokes 0.02
      fill-column 80
      transient-mark-mode t
      shift-select-mode nil
      require-final-newline t
      truncate-partial-width-windows nil
      delete-by-moving-to-trash t
      confirm-nonexistent-file-or-buffer nil
      query-replace-highlight t
      ring-bell-function 'ignore)

(auto-compression-mode t)

(defalias 'yes-or-no-p 'y-or-n-p)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(define-key global-map (kbd "RET") 'newline-and-indent)

(prefer-coding-system 'utf-8-unix)
(set-clipboard-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(set-keyboard-coding-system 'utf-8-unix)
(set-language-environment 'utf-8)
(set-selection-coding-system 'utf-8-unix)
(set-terminal-coding-system 'utf-8-unix)
(setq locale-coding-system 'utf-8-unix)
(setq coding-system-for-write 'utf-8-unix)
(setq default-buffer-file-coding-system 'utf-8-unix)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
(setq file-name-coding-system  'utf-8)

(setq calendar-week-start-day 1
      calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                               "Jeudi" "Vendredi" "Samedi"]
      calendar-month-name-array ["Janvier" "Fevrier" "Mars" "Avril" "Mai"
                                 "Juin" "Juillet" "Aout" "Septembre"
                                 "Octobre" "Novembre" "Decembre"])

(defvar french-holiday
  '((holiday-fixed 1 1 "Jour de l'an")
    (holiday-fixed 5 1 "Fête du travail")
    (holiday-fixed 5 8 "Victoire 45")
    (holiday-fixed 7 14 "Fête nationale")
    (holiday-fixed 8 15 "Assomption")
    (holiday-fixed 11 1 "Toussaint")
    (holiday-fixed 11 11 "Armistice 18")
    (holiday-fixed 12 25 "Noël")
    (holiday-easter-etc 1 "Lundi de Pâques")
    (holiday-easter-etc 39 "Ascension")
    (holiday-easter-etc 50 "Lundi de Pentecôte")))

(setq calendar-date-style 'european
      calendar-holidays french-holiday
      calendar-mark-holidays-flag t
      calendar-mark-diary-entries-flag t)

(when is-mac
  (setq mac-command-modifier 'meta)    ; make cmd key do Meta
  (setq mac-option-modifier 'super)    ; make opt key do Super
  (setq mac-control-modifier 'control) ; make Control key do Control
  (setq ns-function-modifier 'hyper)   ; make Fn key do Hyper
)

(when is-mac
  (setq-default mac-right-option-modifier nil))

(when is-mac
  (setf epa-pinentry-mode 'loopback))

(when is-mac
  (set-locale-environment "fr_FR.UTF-8"))

(use-package no-littering)

;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)

(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)

;; Prefer backward-kill-word over Backspace
(global-set-key (kbd "C-w") #'backward-kill-word)
(global-set-key (kbd "C-x C-k") #'kill-region)

(global-set-key (kbd "C-x C-r") #'recentf-open-files)

;; Move up/down paragraph
(global-set-key (kbd "M-n") #'forward-paragraph)
(global-set-key (kbd "M-p") #'backward-paragraph)

;; Goto Line
(global-set-key (kbd "M-g") #'goto-line)

;; Join Lines
(global-set-key (kbd "M-j") (lambda () (interactive) (join-line -1)))

;; Functions
(global-set-key (kbd "<f5>") #'revert-buffer)

(use-package avy
  :defer t
  :bind
  (("C-z c" . avy-goto-char-timer)
   ("C-z l" . avy-goto-line))
  :custom
  (avy-timeout-seconds 0.3)
  (avy-style 'pre)
  :custom-face
  (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))))

(use-package crux
  :bind
  (("C-a" . crux-move-beginning-of-line)
   ("C-c d" . crux-duplicate-current-line-or-region)
   ("C-x 4 t" . crux-transpose-windows)
   ("C-x K" . crux-kill-other-buffers)
   ("C-k" . crux-smart-kill-line))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))

(use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (progn
      (exec-path-from-shell-initialize)
      ;; (exec-path-from-shell-copy-env "GOPATH")
      ;;(exec-path-from-shell-copy-env "JAVA_HOME")
      ;; (exec-path-from-shell-copy-env "PATH")
      ;; (exec-path-from-shell-copy-env "RUST_SRC_PATH")
      )))

(use-package dired
  :straight nil
  :bind
  (("C-x C-j" . dired-jump))
  :custom
  ;; Always delete and copy recursively
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  ;; Auto refresh Dired, but be quiet about it
  (global-auto-revert-non-file-buffers t)
  (auto-revert-verbose nil)
  ;; Quickly copy/move file in Dired
  (dired-dwim-target t)
  ;; Move files to trash when deleting
  (delete-by-moving-to-trash t)
  ;; Load the newest version of a file
  (load-prefer-newer t)
  ;; Detect external file changes and auto refresh file
  (auto-revert-use-notify nil)
  (auto-revert-interval 3) ; Auto revert every 3 sec
  :config
  ;; Enable global auto-revert
  (global-auto-revert-mode t)
  ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Using GNU ls on macOS instead of ls
  (if (executable-find "gls")
      (progn
        (setq insert-directory-program "gls")
        (setq dired-listing-switches "-lFaGh1v --group-directories-first"))
    (setq dired-listing-switches "-ahlF"))

  :hook
  (dired-mode . (lambda ()
                  (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                  (local-set-key (kbd "RET") #'dired-find-alternate-file)
                  (local-set-key (kbd "^")
                                 (lambda () (interactive) (find-alternate-file ".."))))))

(use-package dired-narrow
  :ensure t
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))

(use-package diredfl
  :init (diredfl-global-mode 1))

(use-package uniquify
  :straight nil
  :custom
  (uniquify-buffer-name-style 'forward)
  (uniquify-separator "/")
  (uniquify-after-kill-buffer-p t)
  (uniquify-ignore-buffers-re "^\\*")
)

(use-package recentf
  :straight nil
  :hook (after-init . recentf-mode)
  :custom
  (recentf-auto-cleanup "09:00am")
  (recentf-max-saved-items 300)
  (recentf-exclude '((expand-file-name package-user-dir)
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "COMMIT_EDITMSG\\'")))

;; When buffer is closed, saves the cursor location
(save-place-mode 1)

;; Set history-length longer
(setq-default history-length 500)

(use-package which-key
  :diminish
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-mode))

(use-package all-the-icons)

(use-package doom-themes

  :config

  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  (doom-themes-org-config)

  ;; or for treemacs users
  ;;(doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package doom-modeline
  :hook (after-init . doom-modeline-init))

(defun nc/setup-font ()
  "Set up font height"
  (interactive)
  (when is-linux
    (set-frame-font "Input Mono-12" nil t))
  (when is-mac
    (set-frame-font "Monaco 15" nil t))
  (when is-windows
    (set-frame-font "Consolas" nil t))
  )

(when has-gui
  (add-hook 'after-init-hook #'nc/setup-font))

(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

(setq  inhibit-startup-message t)

(if (fboundp 'fringe-mode)
    (fringe-mode 2))

(setq ediff-diff-options "-w")

(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

(use-package expand-region
  :bind
  ("C-=" . er/expand-region))

(use-package multiple-cursors
  :bind
  (("C-S-c C-S-c" .  mc/edit-lines)
   ("C-$" .  mc/edit-ends-of-lines)
   ("C-S-b" .  mc/edit-beginnings-of-lines)
   ("C-<" .  mc/mark-previous-word-like-this)
   ("C->" .  mc/mark-next-word-like-this)
   ("C-S-n" .  mc/mark-next-like-this)
   ("C-S-p" .  mc/mark-previous-like-this)
   ("C-*" .  mc/mark-all-dwim)))

(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))

;; test
  (provide 'init)
    ;;; init.el ends here
